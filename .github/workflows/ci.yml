# Example with Log Prefix in CI Workflow
name: CI Pipeline

on:
  push:
    branches: [ master, '**' ]
  pull_request:
    branches: [ master, '**' ]

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Check Docker Version
        run: echo "[BUILD-INFO] Docker Version:" && docker version

      - name: Check Docker Compose Version
        run: echo "[BUILD-INFO] Docker Compose Version:" && docker compose version

      - name: Install Netcat if Missing
        run: echo "[SETUP-INFO] Installing Netcat" && sudo apt-get install -y netcat

      - name: Build Nginx Image
        run: echo "[BUILD-INFO] Building Nginx Image" && docker build --no-cache -t nginx-image -f Dockerfile.nginx .

      - name: Build Tester Image
        run: echo "[BUILD-INFO] Building Tester Image" && docker build --no-cache -t tester-image -f Dockerfile.python .

      - name: Show Image Size for Nginx Image
        run: echo "[SIZE-INFO] Nginx Image Size:" && docker images nginx-image --format "Size: {{.Size}}"

      - name: Run Docker Compose
        run: echo "[RUN-INFO] Running Docker Compose" && docker compose up -d

      - name: Wait for Nginx to be Healthy
        run: |
          echo "[HEALTHCHECK-INFO] Waiting for Nginx to be healthy..."
          for i in {1..10}; do
            HEALTH_STATUS=$(docker inspect -f '{{.State.Health.Status}}' nginx_server)
            echo "[HEALTHCHECK-INFO] Health status: $HEALTH_STATUS"
            if [ "$HEALTH_STATUS" == "healthy" ]; then
              echo "[HEALTHCHECK-INFO] Nginx is healthy."
              break
            elif [ "$HEALTH_STATUS" == "unhealthy" ]; then
              echo "[HEALTHCHECK-ERROR] Nginx is unhealthy. Checking logs for details..."
              docker logs nginx_server
            fi
            sleep 5
          done

      - name: Run Tests
        id: test_step
        run: echo "[TEST-INFO] Running Tests" && docker wait nginx_tester

      - name: Output Tester Logs
        if: always()
        run: echo "[TESTER-INFO] Tester Logs:" && docker logs nginx_tester

      - name: Output Nginx Logs
        if: always()
        run: echo "[NGINX-INFO] Nginx Logs:" && docker logs nginx_server

      - name: Determine Test Result
        id: result_step
        run: |
          echo "[TEST-INFO] Determining Test Result..."
          EXIT_CODE=$(docker inspect nginx_tester --format='{{.State.ExitCode}}')
          if [ "$EXIT_CODE" -eq 0 ]; then
            echo "[TEST-INFO] Tests succeeded."
            echo "test_result=succeeded" >> $GITHUB_OUTPUT
          else
            echo "[TEST-ERROR] Tests failed."
            echo "test_result=fail" >> $GITHUB_OUTPUT
          fi

      - name: Create Artifact File
        run: echo "[ARTIFACT-INFO] Creating artifact file" && echo "${{ steps.result_step.outputs.test_result }}" > artifact_result.txt

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: test_result
          path: artifact_result.txt

      - name: Tear Down
        if: always()
        run: echo "[CLEANUP-INFO] Tearing Down Environment" && docker compose down -v --rmi all --remove-orphans
