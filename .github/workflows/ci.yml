name: CI Pipeline

on:
  push:
    branches: [ master, '**' ]
  pull_request:
    branches: [ master, '**' ]

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Check Docker Version
        run: docker version

      - name: Check Docker Compose Version
        run: docker compose version

      - name: Build Nginx Image
        run: docker build --no-cache -t nginx-image -f Dockerfile.nginx .

      - name: Build Tester Image
        run: docker build --no-cache -t tester-image -f Dockerfile.python .

      - name: Run Docker Compose
        run: docker compose up -d

      - name: Wait for Nginx to be Healthy
        run: |
          echo "Waiting for Nginx to be healthy..."
          until [ "$(docker inspect -f '{{.State.Health.Status}}' nginx_server)" == "healthy" ]; do
            printf '.'
            sleep 2
          done
          echo "Nginx is healthy."

      - name: Run Tests
        id: test_step
        run: docker wait nginx_tester

      - name: Output Tester Logs
        if: always()
        run: docker logs nginx_tester

      - name: Output Nginx Logs
        if: always()
        run: docker logs nginx_server

      - name: Determine Test Result
        id: result_step
        run: |
          EXIT_CODE=$(docker inspect nginx_tester --format='{{.State.ExitCode}}')
          if [ "$EXIT_CODE" -eq 0 ]; then
            echo "Tests succeeded."
            echo "test_result=succeeded" >> $GITHUB_OUTPUT
          else
            echo "Tests failed."
            echo "test_result=fail" >> $GITHUB_OUTPUT
          fi

      - name: Create Artifact File
        run: echo "${{ steps.result_step.outputs.test_result }}" > ${{ steps.result_step.outputs.test_result }}

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.result_step.outputs.test_result }}
          path: ${{ steps.result_step.outputs.test_result }}

      - name: Tear Down
        if: always()
        run: docker compose down -v --rmi all --remove-orphans
